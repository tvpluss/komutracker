name: Build

on:
  push:
    branches: [ master, release ]
    tags: 
      - v*
  pull_request:
    branches: [ master ]
  #release:
  #  types: [published]

jobs:
  build:
    name: ${{ matrix.os }}, py-${{ matrix.python_version }}, node-${{ matrix.node_version }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    env:
      RELEASE: false
      # sets the macOS version target, see: https://users.rust-lang.org/t/compile-rust-binary-for-older-versions-of-mac-osx/38695
      MACOSX_DEPLOYMENT_TARGET: 10.9
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [windows-latest, ubuntu-20.04, macOS-12]
        python_version: [3.9]
        node_version: [16]
        experimental: [false]
        skip_rust: [true]
        skip_webui: [true]
        skip_test: [true]
        #include:
        #  - os: ubuntu-latest
        #    python_version: 3.9
        #    node_version: 16
        #    experimental: true
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{github.ref}}
        submodules: 'recursive'
        fetch-depth: 0
    - name: Set up Python
      if: runner.os != 'macOS'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python_version }}
    - name: Set up Python for macOS
      if: runner.os == 'macOS'
      run: |
        curl https://www.python.org/ftp/python/${PYTHON_VERSION}/python-${PYTHON_VERSION}-macosx10.9.pkg -o "python.pkg"
        sudo installer -pkg python.pkg -target /
        echo "/Library/Frameworks/Python.framework/Versions/${{ matrix.python_version }}/bin" >> $GITHUB_PATH
        "/Applications/Python ${{ matrix.python_version }}/Install Certificates.command"
      env:
        # Add the patch number to the Python version (for FTP download link)
        PYTHON_VERSION: ${{ matrix.python_version }}.13
  
    - name: Set up Node
      if: ${{!matrix.skip_webui}}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node_version }}
  
    - name: Set up Rust nightly
      if: ${{!matrix.skip_rust}}
      uses: actions-rs/toolchain@v1
      id: toolchain
      with:
        profile: minimal
        toolchain: nightly
        override: true

    - name: Get npm cache dir
      id: npm-cache-dir
      run: |
        echo "::set-output name=dir::$(npm config get cache)"

    - uses: actions/cache@v1
      name: Cache npm
      if: ${{!matrix.skip_webui}}
      env:
        cache-name: node
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-
    
    - name: Generate release_note
      if: "startsWith(runner.os, 'windows')"  
      run: ./scripts/build_changelog.py > changelog.md

    - name: Upload release note
      if: "startsWith(runner.os, 'windows')"
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: changelog.md

    - name: Cache cargo build
      uses: actions/cache@v1
      if: ${{ !matrix.skip_rust && (runner.os != 'macOS')}}  # cache doesn't seem to behave nicely on macOS, see: https://github.com/nccasia/aw-server-rust/issues/180
      env:
        cache-name: cargo-build-target
      with:
        path: aw-server-rust/target
        # key needs to contain rustc_hash due to https://github.com/nccasia/aw-server-rust/issues/180
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-${{ steps.toolchain.outputs.rustc_hash }}-
    - name: Install APT dependencies
      shell: bash
      if: "startsWith(runner.os, 'linux')"
      run: |
          sudo apt-get update
          # Unsure which of these are actually necessary...
          sudo apt-get install -y \
            qt5-default \
            qtwayland5 \
            libqt5x11extras5 \
            libfontconfig1 \
            libxcb1 \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libxcursor-dev \
            libxext-dev \
            libxfixes-dev \
            libxft-dev \
            libxi-dev \
            libxrandr-dev \
            libxrender-dev

    - name: Install dependencies
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          choco install innosetup
        fi
        pip install poetry virtualenv

    - name: Build
      shell: bash
      run: |
        python -m virtualenv venv
        source venv/bin/activate || source venv/Scripts/activate
        poetry install
        make build

    - name: Run tests
      if: ${{!matrix.skip_test}}
      shell: bash
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        make test

    # Don't run integration tests on Windows, doesn't work for some reason
    - name: Run integration tests
      if: ${{!matrix.skip_test}} # and "!startsWith(runner.os, 'windows')"
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        make test-integration

    - name: Package
      shell: bash
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        poetry install  # run again to ensure we have the correct version of PyInstaller
        make package

    - name: Package dmg
      if: startsWith(runner.os, 'macOS')
      run: |
        # Load certificates
        # TODO: Only load key & sign if env vars for signing exists
        ./scripts/ci/import-macos-p12.sh

        # Build .app and .dmg
        source venv/bin/activate
        make dist/KomuTracker.dmg
        codesign --verbose -s ${APPLE_PERSONALID} dist/KomuTracker.dmg

        # Run prechecks
        brew install akeru-inc/tap/xcnotary
        xcnotary precheck dist/KomuTracker.app
        xcnotary precheck dist/KomuTracker.dmg

        # Notarize
        make dist/notarize
        mv dist/KomuTracker.dmg dist/komutracker-$(scripts/package/getversion.sh)-macos-x86_64.dmg
      env:
        APPLE_EMAIL: ${{ secrets.APPLE_EMAIL }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_PERSONALID: ${{ secrets.APPLE_TEAMID }} # APPLE_PERSONAL_ID == APPLE_TEAM_ID for personal accounts
        APPLE_TEAMID: ${{ secrets.APPLE_TEAMID }}
        CERTIFICATE_MACOS_P12_BASE64: ${{ secrets.CERTIFICATE_MACOS_P12_BASE64 }}
        CERTIFICATE_MACOS_P12_PASSWORD: ${{ secrets.CERTIFICATE_MACOS_P12_PASSWORD }}

    - name: Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: builds-${{ runner.os }}-py${{ matrix.python_version }}
        path: dist/komutracker-*.*

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*/komutracker-*.zip
          body_path: dist/changelog/changelog.md
